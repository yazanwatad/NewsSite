@page
@model IndexModel
@{
    Layout = "~/Pages/Shared/_Layout.cshtml";
    ViewData["HeaderData"] = Model.HeaderData;
    ViewData["Title"] = "Home - NewsSitePro";
}

<div class="home-container">
    <!-- Feed Container -->
    <div class="feed-container">
        <div class="feed-header">
            <h2>Latest News</h2>
            <div class="feed-controls">
                <button class="feed-tab active" data-feed="all">All</button>
                <button class="feed-tab" data-feed="following">Following</button>
                <button class="feed-tab" data-feed="trending">Trending</button>
            </div>
        </div>

        <!-- Loading State -->
        <div id="loading" class="loading-state">
            <i class="fas fa-spinner fa-spin"></i> Loading posts...
        </div>

        <!-- Posts Container -->
        <div id="postsContainer" class="posts-container">
            <!-- Posts will be loaded here dynamically -->
        </div>

        <!-- Load More Button -->
        <div class="load-more-container" style="display: none;">
            <button id="loadMoreBtn" class="btn btn-outline-primary btn-load-more">
                <i class="fas fa-plus"></i> Load More Posts
            </button>
        </div>

        <!-- Empty State -->
        <div id="emptyState" class="empty-state" style="display: none;">
            <i class="fas fa-newspaper"></i>
            <h3>No posts available</h3>
            <p>Be the first to share some news!</p>
            <a href="/Post" class="btn btn-primary">
                <i class="fas fa-plus"></i> Create Post
            </a>
        </div>
    </div>
</div>

@section Scripts {
<script>
    let currentPage = 1;
    let currentFeed = 'all';
    let isLoading = false;
    let hasMorePosts = true;

    document.addEventListener('DOMContentLoaded', function() {
        initializeFeed();
        setupFeedTabs();
        setupLoadMore();
    });

    function initializeFeed() {
        loadPosts(1, true);
    }

    function setupFeedTabs() {
        document.querySelectorAll('.feed-tab').forEach(tab => {
            tab.addEventListener('click', function() {
                const feedType = this.dataset.feed;
                if (feedType !== currentFeed) {
                    // Update active tab
                    document.querySelectorAll('.feed-tab').forEach(t => t.classList.remove('active'));
                    this.classList.add('active');
                    
                    // Reset and load new feed
                    currentFeed = feedType;
                    currentPage = 1;
                    hasMorePosts = true;
                    loadPosts(1, true);
                }
            });
        });
    }

    function setupLoadMore() {
        document.getElementById('loadMoreBtn').addEventListener('click', function() {
            if (!isLoading && hasMorePosts) {
                loadPosts(currentPage + 1, false);
            }
        });
    }

    async function loadPosts(page = 1, replace = false) {
        if (isLoading) return;
        
        isLoading = true;
        const loading = document.getElementById('loading');
        const container = document.getElementById('postsContainer');
        const loadMoreContainer = document.querySelector('.load-more-container');
        const emptyState = document.getElementById('emptyState');

        // Show loading state
        if (replace) {
            loading.style.display = 'block';
            container.innerHTML = '';
            loadMoreContainer.style.display = 'none';
            emptyState.style.display = 'none';
        } else {
            document.getElementById('loadMoreBtn').innerHTML = '<i class="fas fa-spinner fa-spin"></i> Loading...';
        }

        try {
            const response = await fetch(`/api/posts?page=${page}&limit=10&feed=${currentFeed}`);
            const data = await response.json();

            if (response.ok && data.posts) {
                if (replace) {
                    container.innerHTML = '';
                }

                if (data.posts.length === 0) {
                    if (replace) {
                        emptyState.style.display = 'block';
                    } else {
                        hasMorePosts = false;
                        loadMoreContainer.style.display = 'none';
                    }
                } else {
                    data.posts.forEach(post => {
                        container.appendChild(createPostElement(post));
                    });

                    currentPage = page;
                    hasMorePosts = data.posts.length === 10; // If we got less than 10, no more posts
                    
                    if (hasMorePosts) {
                        loadMoreContainer.style.display = 'block';
                    } else {
                        loadMoreContainer.style.display = 'none';
                    }
                }
            } else {
                showError('Failed to load posts. Please try again.');
            }
        } catch (error) {
            console.error('Error loading posts:', error);
            showError('An error occurred while loading posts.');
        } finally {
            isLoading = false;
            loading.style.display = 'none';
            document.getElementById('loadMoreBtn').innerHTML = '<i class="fas fa-plus"></i> Load More Posts';
        }
    }

    function createPostElement(post) {
        const postDiv = document.createElement('div');
        postDiv.className = 'post-card';
        postDiv.dataset.postId = post.articleID;

        const publishDate = new Date(post.publishDate).toLocaleDateString('en-US', {
            month: 'short',
            day: 'numeric',
            year: 'numeric'
        });

        postDiv.innerHTML = `
            <div class="post-header">
                <div class="post-user-info">
                    <a href="/UserProfile/${post.user?.id || ''}" class="user-link">
                        <div class="post-avatar">
                            ${post.user?.avatar ? 
                                `<img src="${post.user.avatar}" alt="${post.user.username}" />` :
                                `<div class="avatar-placeholder">${(post.user?.username || 'U').charAt(0).toUpperCase()}</div>`
                            }
                        </div>
                        <div class="user-details">
                            <span class="username">${post.user?.username || 'Anonymous'}</span>
                            <span class="post-date">${publishDate}</span>
                        </div>
                    </a>
                </div>
                <div class="post-category">
                    <span class="category-badge">${post.category}</span>
                </div>
            </div>

            <div class="post-content" onclick="openPost(${post.articleID})">
                <h3 class="post-title">${post.title}</h3>
                ${post.imageURL ? `
                    <div class="post-image">
                        <img src="${post.imageURL}" alt="${post.title}" loading="lazy" />
                    </div>
                ` : ''}
                <p class="post-text">${post.content.length > 200 ? post.content.substring(0, 200) + '...' : post.content}</p>
                ${post.sourceURL ? `
                    <div class="post-source">
                        <i class="fas fa-external-link-alt"></i>
                        <a href="${post.sourceURL}" target="_blank" rel="noopener">
                            ${post.sourceName || 'Source'}
                        </a>
                    </div>
                ` : ''}
            </div>

            <div class="post-actions">
                <div class="post-stats">
                    <span class="stat">
                        <i class="fas fa-heart ${post.isLiked ? 'liked' : ''}"></i>
                        <span class="likes-count">${post.likes || 0}</span>
                    </span>
                    <span class="stat">
                        <i class="fas fa-eye"></i>
                        <span>${post.views || 0}</span>
                    </span>
                </div>
                <div class="post-buttons">
                    <button class="action-btn like-btn ${post.isLiked ? 'active' : ''}" onclick="toggleLike(${post.articleID}, this)" data-post-id="${post.articleID}">
                        <i class="fas fa-heart"></i>
                        <span>${post.isLiked ? 'Liked' : 'Like'}</span>
                    </button>
                    <button class="action-btn comment-btn" onclick="openPost(${post.articleID})">
                        <i class="fas fa-comment"></i>
                        <span>Comment</span>
                    </button>
                    <button class="action-btn save-btn ${post.isSaved ? 'active' : ''}" onclick="toggleSave(${post.articleID}, this)">
                        <i class="fas fa-bookmark"></i>
                        <span>${post.isSaved ? 'Saved' : 'Save'}</span>
                    </button>
                    <button class="action-btn share-btn" onclick="sharePost(${post.articleID})">
                        <i class="fas fa-share"></i>
                        <span>Share</span>
                    </button>
                </div>
            </div>
        `;

        return postDiv;
    }

    function openPost(postId) {
        window.location.href = `/Post/${postId}`;
    }

    async function toggleLike(postId, button) {
        try {
            const response = await fetch(`/api/posts/Like/${postId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            const result = await response.json();
            if (result.action) {
                const likesCountSpan = button.closest('.post-card').querySelector('.likes-count');
                const heartIcon = button.querySelector('i');
                const buttonText = button.querySelector('span');
                
                if (result.action === 'liked') {
                    button.classList.add('active');
                    heartIcon.classList.add('liked');
                    buttonText.textContent = 'Liked';
                    likesCountSpan.textContent = parseInt(likesCountSpan.textContent) + 1;
                } else {
                    button.classList.remove('active');
                    heartIcon.classList.remove('liked');
                    buttonText.textContent = 'Like';
                    likesCountSpan.textContent = Math.max(0, parseInt(likesCountSpan.textContent) - 1);
                }
            }
        } catch (error) {
            console.error('Error toggling like:', error);
            showError('Failed to update like status');
        }
    }

    async function toggleSave(postId, button) {
        try {
            const response = await fetch(`/api/posts/Save/${postId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            const result = await response.json();
            if (result.action) {
                const buttonText = button.querySelector('span');
                
                if (result.action === 'saved') {
                    button.classList.add('active');
                    buttonText.textContent = 'Saved';
                } else {
                    button.classList.remove('active');
                    buttonText.textContent = 'Save';
                }
            }
        } catch (error) {
            console.error('Error toggling save:', error);
            showError('Failed to update save status');
        }
    }

    function sharePost(postId) {
        const url = `${window.location.origin}/Post/${postId}`;
        if (navigator.share) {
            navigator.share({
                title: 'Check out this post',
                url: url
            });
        } else {
            navigator.clipboard.writeText(url).then(() => {
                showMessage('Link copied to clipboard!', 'success');
            });
        }
    }

    function showError(message) {
        showMessage(message, 'error');
    }

    function showMessage(message, type = 'info') {
        const toast = document.createElement('div');
        toast.className = `alert alert-${type === 'error' ? 'danger' : type === 'success' ? 'success' : 'info'} alert-dismissible fade show position-fixed`;
        toast.style.top = '20px';
        toast.style.right = '20px';
        toast.style.zIndex = '9999';
        toast.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        
        document.body.appendChild(toast);
        
        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        }, 3000);
    }
</script>
}

<style>
.home-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 1rem;
}

.feed-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 2px solid #e9ecef;
}

.feed-header h2 {
    margin: 0;
    color: #2c3e50;
}

.feed-controls {
    display: flex;
    gap: 0.5rem;
}

.feed-tab {
    background: none;
    border: 2px solid #dee2e6;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    color: #6c757d;
    cursor: pointer;
    transition: all 0.3s ease;
}

.feed-tab:hover,
.feed-tab.active {
    background: #007bff;
    border-color: #007bff;
    color: white;
}

.loading-state {
    text-align: center;
    padding: 2rem;
    color: #6c757d;
}

.posts-container {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}

.post-card {
    background: white;
    border: 1px solid #e9ecef;
    border-radius: 12px;
    padding: 1.5rem;
    transition: box-shadow 0.3s ease;
}

.post-card:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.post-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
}

.post-user-info .user-link {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    text-decoration: none;
    color: inherit;
}

.post-user-info .user-link:hover .username {
    color: #007bff;
}

.post-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    overflow: hidden;
}

.post-avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.avatar-placeholder {
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: bold;
}

.user-details {
    display: flex;
    flex-direction: column;
}

.username {
    font-weight: 600;
    color: #2c3e50;
}

.post-date {
    font-size: 0.875rem;
    color: #6c757d;
}

.category-badge {
    background: #007bff;
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 500;
}

.post-content {
    cursor: pointer;
    margin-bottom: 1rem;
}

.post-content:hover .post-title {
    color: #007bff;
}

.post-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin: 0 0 0.75rem 0;
    color: #2c3e50;
    transition: color 0.3s ease;
}

.post-image {
    margin: 0.75rem 0;
    border-radius: 8px;
    overflow: hidden;
}

.post-image img {
    width: 100%;
    height: 250px;
    object-fit: cover;
}

.post-text {
    color: #555;
    line-height: 1.6;
    margin: 0 0 0.75rem 0;
}

.post-source {
    padding: 0.5rem;
    background: rgba(0, 123, 255, 0.1);
    border-radius: 6px;
    font-size: 0.875rem;
}

.post-source i {
    color: #007bff;
    margin-right: 0.5rem;
}

.post-source a {
    color: #007bff;
    text-decoration: none;
}

.post-source a:hover {
    text-decoration: underline;
}

.post-actions {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding-top: 1rem;
    border-top: 1px solid #e9ecef;
}

.post-stats {
    display: flex;
    gap: 1rem;
}

.post-stats .stat {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    color: #6c757d;
    font-size: 0.875rem;
}

.post-stats .stat i.liked {
    color: #e74c3c;
}

.post-buttons {
    display: flex;
    gap: 0.5rem;
}

.action-btn {
    background: none;
    border: none;
    padding: 0.5rem 0.75rem;
    border-radius: 6px;
    color: #6c757d;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 0.25rem;
    font-size: 0.875rem;
}

.action-btn:hover {
    background: #f8f9fa;
    color: #007bff;
}

.action-btn.active {
    color: #007bff;
}

.like-btn.active {
    color: #e74c3c;
}

.save-btn.active {
    color: #28a745;
}

.load-more-container {
    text-align: center;
    margin-top: 2rem;
}

.btn-load-more {
    padding: 0.75rem 2rem;
    border-radius: 25px;
}

.empty-state {
    text-align: center;
    padding: 3rem 1rem;
    color: #6c757d;
}

.empty-state i {
    font-size: 3rem;
    margin-bottom: 1rem;
    color: #dee2e6;
}

.empty-state h3 {
    margin-bottom: 0.5rem;
}

@@media (max-width: 768px) {
    .home-container {
        padding: 0.5rem;
    }
    
    .feed-header {
        flex-direction: column;
        gap: 1rem;
        align-items: stretch;
    }
    
    .feed-controls {
        justify-content: center;
    }
    
    .post-actions {
        flex-direction: column;
        gap: 1rem;
    }
    
    .post-buttons {
        justify-content: space-around;
    }
}
</style>